#!/bin/bash
#
# A sample config file for DoCIF
# This is just a shell file that is sourced by DoCIF scripts.

# @REQUIRED
# A docker baseimage repostiory. Create one on the docker hub
BASEIMAGE_REPO="robojackets/robocup-baseimage"

# If true, ${BASEIMAGE_REPO}:master is pushed when on master.
# Defaults to false.
PUSH_BASEIMAGE="true"

# @REQUIRED
# The github repository location, for sendings status updates to
# This is CASE SENSITIVE!!
GITHUB_REPO='RoboJackets/robocup-software'

# The url to point to when a status check is pending.
# Will point to https://github.com/jgkamat/DoCIF if unset.
PENDING_URL="https://github.com/jgkamat/DoCIF"

# A custom dockerfile, for advanced setup
# DO NOT SET THIS IF YOU ARE A FIRST TIME USER.
# See ./commands/Dockerfile for the default dockerfile
# This file is in relation to you'r project's root.
CUSTOM_DOCKERFILE="./util/docker/baseimage/Dockerfile"

############################## Variable Names ##################################

# These are the variables that will hold secrets and such.
# In this example, DOCKER_PASS needs to be set to the docker hub password
# This can be done through the CircleCi GUI or Travis CI secrets
DOCKER_PASSWORD_VAR="DOCKER_PASS"
DOCKER_EMAIL_VAR="DOCKER_EMAIL"
DOCKER_USER_VAR="DOCKER_USER"
# This would be insecure, but you can do it below. You should add these vars to
# circle protected environment variables if you are concerned about security
# DOCKER_EMAIL="help@gmail.com"

# Status token is used for updating status
GH_STATUS_TOKEN_VAR="GH_STATUS_TOKEN"
# Variable holing the username of the Status Token
GH_USER_VAR="GIT_USERNAME"
# Variable holing the email of the Status Token
GH_EMAIL_VAR="GIT_EMAIL"


# The project root INSIDE THE DOCKER CONTAINER
# Reccomended to leave as default (not set)
# This will act as the 'current directory' within the project
# This will need to be changed in the dockerfile as well to take effect. (use a custom one!)
# DOCKER_PROJECT_ROOT="/home/developer/project"

# The git clone root INSIDE THE DOCKER CONTAINER
# GIT_CLONE_ROOT="${DOCKER_PROJECT_ROOT}"

################################################################################

# Cache directories, not required.
# Directories to link to the docker container for each build and persist between builds. Add to circle.yml as well.
# for caching on their servers
# YOU MUST USE ~ IN YOUR PATH (NO $HOME), SO WE KNOW WHERE TO LINK TO INSIDE THE CONTAINER.
# This directory MUST BE ADDED TO circle.yml AS WELL IN ORDER FOR ACTUAL CACHING TO TAKE PLACE
CACHE_DIRECTORIES=()
CACHE_DIRECTORIES+=('~/.ccache')


################################# COMMANDS #####################################

# The script to set up the environment, by default ubuntu.
# YOU WILL NEED TO USE SUDO TO GET ROOT PRIVLEGES HERE
SETUP_COMMAND="sudo ./util/ubuntu-setup --yes --firmware"
# SETUP_COMMAND="./ubuntu-setup-script"

# DOCIF can cache baseimages, if you give it files that will force a rebuild if changed.
# Include the setup script itself, as well as any dependency files
# Leaving this blank will turn off caching
SETUP_SHA_FILES=()
 # This file should be included unless you leave this variable completely blank, forcing a rebuild when DoCIF is updated
SETUP_SHA_FILES+=("./.gitmodules")
SETUP_SHA_FILES+=("./config.docif")
SETUP_SHA_FILES+=("./util/ubuntu-setup")
SETUP_SHA_FILES+=("./util/requirements2.txt")
SETUP_SHA_FILES+=("./util/requirements3.txt")
SETUP_SHA_FILES+=("./util/ubuntu-packages.txt")
SETUP_SHA_FILES+=("./util/docker/baseimage/Dockerfile")

# @REQUIRED
# Commands to run when testing. Each index will have it's own status token
# Commands are in this format
# COMMAND; SHORT_NAME; DESCRIPTION
TEST_COMMANDS=()
TEST_COMMANDS+=( 'make;compile;A check to see if the code compiles' )
TEST_COMMANDS+=( 'make test-soccer;test-soccer;A check to see if soccer tests pass' )
TEST_COMMANDS+=( 'make robot2015;firmware;A check to see if firmware compiles' )
TEST_COMMANDS+=( 'make test-firmware;test-firmware;A check to see if firmware tests pass' )
TEST_COMMANDS+=( 'make checkstyle;style;A check to see if style passes' )
TEST_COMMANDS+=( 'make test-python;test-python;A check to see if python unit tests pass' )
TEST_COMMANDS+=('make coverage;coverage;A coverage build task.')
# @RECCOMENDED
# Clean command. Cleans the build files so there is no way the previous build can interfere. Add if you run
# into issues
CLEAN_COMMAND="make clean || true"
# Other options are `gradle clean`, `mvn clean`, or `rm -rf build`

# Environmental variables to make available to the build environment
ENV_VARS=()
ENV_VARS+=("GH_TOKEN")  # To be used by autoupdating script
ENV_VARS+=("COVERALLS_REPO_TOKEN")
ENV_VARS+=("CIRCLE_BUILD_NUM")
ENV_VARS+=("CIRCLE_BRANCH")
ENV_VARS+=("CIRCLE_SHA1")

# Command to run when deploying. Leave blank for no deploy.
# Make sure any secrets these commands need are added to ENV_VARS
DEPLOY_COMMAND="./autoupdate-docs.sh"

################################################################################

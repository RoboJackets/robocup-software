name: Pull request checks

on: [pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: robojackets/robocup-software:foxy
    defaults:
      run:
        shell: bash
    steps:
      - name: Config git
        run: "git config --global --add safe.directory /__w/robocup-software/robocup-software"

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run util/ubuntu-setup as sudo
        run: "sudo ./util/ubuntu-setup --yes"

      - name: Install git pre-commit hooks & update submodules
        run: "./util/git-setup --yes"

      - name: Make ${{ github.base_ref }} branch exist
        run: |
          git checkout -b ${{ github.base_ref }} --track origin/${{ github.base_ref }}
          git checkout -

      - name: Build
        run: |
          echo "::add-matcher::ci/clang.json"
          source /opt/ros/foxy/setup.bash
          source install/setup.bash
          make all
          echo "::remove-matcher owner=clang::"

      - name: Test
        run: |
          echo "::add-matcher::ci/gtest.json"
          source /opt/ros/foxy/setup.bash
          source install/setup.bash
          ./install/lib/rj_robocup/test-soccer
          echo "::remove-matcher owner=gtest::"

      - name: Run clang-tidy
        run: |
          echo "::add-matcher::ci/clang-tidy.json"
          source /opt/ros/foxy/setup.bash
          source install/setup.bash
          DIFFBASE=${{ github.base_ref }} make checktidy-lines
          echo "::remove-matcher owner=clang-tidy::"
        if: always()

  fix-style:
    runs-on: ubuntu-latest
    container:
      image: ros:foxy
    defaults:
      run:
        shell: bash
    steps:
      - name: Config git
        run: "git config --global --add safe.directory /__w/robocup-software/robocup-software"

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Make ${{ github.base_ref }} branch exist
        run: |
          git checkout -b ${{ github.base_ref }} --track origin/${{ github.base_ref }}
          git checkout -

      - name: Install dependencies
        run: |
          apt-get update && apt-get -y install clang-format sudo git python3-pip
          sudo pip3 install --upgrade flake8-diff flake8 pip
          sudo pip3 install --upgrade black

      - name: Check code style
        run: |
          # check formatting style (C++)
          clang-format -style=file -fallback-style=Google -output-replacements-xml $(git diff -U0 --no-color ${{ github.base_ref }} ${{ github.head_ref }} -- '*.cpp' '*.h' | grep -E '^\+\+\+' | cut -c '5-') | grep -q "<replacement"
          if [ $? -eq 0 ]; then
            git diff -U0 --no-color ${{ github.base_ref }} ${{ github.head_ref }} -- '*.cpp' '*.h' | python3 util/clang-format-diff.py -binary clang-format-10 -i -p1
            git add -A
            git commit -m "Apply Clang-Format to C++ code"
            echo "::set-output name=changed::true"
          else
            echo "No C++ code style errors detected"
          fi

          # check formatting style (Python)
          black --check $(git diff -U0 --no-color ${{ github.base_ref }} ${{ github.head_ref }} -- '*.py' | grep -E '^\+\+\+' | cut -c '5-')
          if [ $? -eq 0 ]; then
            echo "No Python code style errors detected"
          else
            black $(git diff -U0 --no-color ${{ github.base_ref }} ${{ github.head_ref }} -- '*.py' | grep -E '^\+\+\+' | cut -c '5-')
            git add -A
            git commit -m "Apply Black to Python code"
            echo "::set-output name=changed::true"
          fi

      - name: Create pull request
        if: steps.check-style.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Apply Code Style
          title: Apply Code Style
          body: "This pull request contains code style fixes automatically applied by Clang-Format and Black."
          branch: apply-code-style/${{ github.head_ref }}
          base: ${{ github.base_ref }}

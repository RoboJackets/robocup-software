Import('*')

project = 'robocup'
ucf_file = File(project + '.ucf')
top_file = File(project + '.v')
bit_file = File(project + '.bit')
svf_file = File(project + '.svf')

xilinx.Tool('textfile')

# Generate an iMPACT script to make the SVF file
cpu_bsdl_file = File('AT91SAM7S321_TQ64.bsd')
impact_file = xilinx.Textfile(project + '.impact', [
	'setmode -bscan',
	'setcable -p svf -file ' + svf_file.abspath,
	'adddevice -p 1 -file ' + cpu_bsdl_file.srcnode().abspath,
	'adddevice -p 2 -file ' + bit_file.abspath,
	'program -p 2',
	'quit'])

# Generate an urjtag script
jtag_file = xilinx.Textfile(project + '.jtag', [
	'cable jtagkey pid=0x6010',
	'detect',
	'svf ' + File(svf_file).path])

#FIXME - Create a module, use it, compile, remove its use, compile.  XST will still see it (somewhere in build dir) and think it is a possible top.
#FIXME - Build this directory, then build fpga-results.  xflow will run again even though nothing's changed.  Why?

xilinx.Command(ucf_file, ucf_file.srcnode(), Copy('$TARGET', '$SOURCE'))

xflow = xilinx.Command([bit_file, 'xflow.log'], [top_file, ucf_file],
	'xflow -wd ${TARGET.dir} -p xc3s100etq144-4 -synth xst_verilog -implement fast_runtime -config bitgen $SOURCE')
Clean(xflow, Dir('.'))

Alias('fpga2011', bit_file)
Help('  fpga2011: Build 2011 FPGA firmware\n')

xilinx.Command(svf_file, [impact_file, bit_file], 'impact -batch ${SOURCE.file}', chdir=Dir('.'))

# Command to print only the errors, warnings, and infos from xflow.
def PrintXFlowResults(target, source, env):
	f = file(str(source[0]))
	print_more = False
	for line in f:
		line = line.strip('\n')
		if line.startswith('INFO:') or line.startswith('WARNING:') or line.startswith('ERROR:'):
			print_more = True
			print line
		elif line.startswith('   ') and line[3] != ' ' and print_more:
			print line
		else:
			print_more = False
	f.close()
xilinx.Alias('fpga2011-results', 'xflow.log', Action(PrintXFlowResults))
AlwaysBuild('fpga2011-results')
Help('  fpga2011-results: Build 2011 FPGA firmware and show info, warnings, and errors\n')

# Programming targets
xilinx.Alias('fpga2011-jtag', [jtag_file, svf_file], Action('jtag $SOURCE'))
AlwaysBuild('fpga2011-jtag')
Help('  fpga2011-jtag: Build and program 2011 FPGA firmware with FT2232 JTAG adapter\n')

xilinx.Alias('fpga2011-spi', [bit_file, File('../cpu/tools/spi-write').srcnode()], Action('${SOURCES[1]} ${SOURCES[0]}'))
AlwaysBuild('fpga2011-spi')
Help('  fpga2011-spi: Build 2011 FPGA firmware and write to SPI flash on robot\n')

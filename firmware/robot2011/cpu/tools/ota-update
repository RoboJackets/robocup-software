#!/usr/bin/env python

import sys
import time
from getopt import *

from rc_radio import *

def abort():
	# Abort OTA
	for i in range(4):
		send([0x00, 0xff])
		time.sleep(0.05)

ch = 0
required = set()

(args, filename) = getopt(sys.argv[1:], 'c:r:')
for (name, value) in args:
	if name == '-c':
		ch = int(value)
	elif name == '-r':
		id_list = value
		ranges = id_list.split(',')
		for r in ranges:
			if '-' in r:
				(start, end) = r.split('-')
				for i in range(int(start), int(end) + 1):
					required.add(i)
			else:
				required.add(int(r))
channel(ch)

robots = set()
for i in range(4):
	send([0xc9, 0xd5])
	while True:
		rx = receive()
		if not rx:
			break
		robot_id = rx[0]
		if not robot_id in robots:
			robots.add(robot_id)
			print 'Found robot %d' % robot_id
if not robots:
	print >> sys.stderr, 'Did not find any robots - check radio channel'
	abort()
	sys.exit(1)

if required and robots != required:
	print >> sys.stderr, 'Did not find expected set of robots'
	abort()
	sys.exit(1)

if len(filename) != 1:
	print >> sys.stderr, "Usage: %s [-c <channel>] [-r <robot IDs>] <flash_image>" % sys.argv[0]
	abort()
	sys.exit(1)

f = file(filename[0])
data = [ord(x) for x in f.read()]
f.close()

assert robots

offset = 0
Chunk_Size = 32  # Must be a multiple of 4 and a factor of the page size
start = time.time()
tries = 0
while offset < len(data):
	if not debug:
		print '\r%3d%%' % (offset * 100 / len(data)),
		sys.stdout.flush()
	
	n = min(Chunk_Size, len(data) - offset)
	packet = [0x39, offset & 0xff, (offset >> 8) & 0xff, (offset >> 16) & 0xff] + data[offset:offset + n]
	
	if debug:
		print len(packet), packet
	
	# Send this chunk
	send(packet)
	
	# Wait for replies
	ok = [False] * 16
	num_ok = 0
	while num_ok != len(robots):
		rx = receive()
		if not rx:
			# Timeout
			break
		robot_id = rx[0] & 15
		status = rx[0] >> 4
		assert status == 0 or status == 4 or status == 8
		remote_offset = rx[1] + rx[2] * 256 + rx[3] * 65536
		if status == 4:
			# Robot missed earlier data
			print 'Robot %d is behind: sent %06x, up to %06x' % (robot_id, offset, remote_offset)
			offset = min(offset, remote_offset)
			assert remote_offset < offset
		elif not ok[robot_id]:
			# Acknowledgement
			ok[robot_id] = True
			num_ok += 1
	
	if num_ok == len(robots):
		# All robots acknowledged this chunk, so go on to the next one
		offset += Chunk_Size
		tries = 0
	else:
		# Timed out waiting for at least one acknowledgement
		tries += 1
		if tries == 10:
			print 'Tried too many times'
			for i in robots:
				if not ok[i]:
					print '  Robot %d did not respond' % i
			abort()
			sys.exit(1)
end = time.time()
print '\rDone'
print '%f bytes/s' % (float(len(data)) / (end - start))

# Finish
n = len(data)
packet = [0x6b, n & 0xff, (n >> 8) & 0xff, (n >> 16) & 0xff]
num_ok = 0
ok = [False] * 16
for tries in range(10):
	send(packet)
	while num_ok != len(robots):
		rx = receive()
		if not rx:
			break
		robot_id = rx[0] & 15
		status = rx[0] >> 4
		assert status == 15
		if status == 15 and not ok[robot_id]:
			print 'Robot %d finished' % robot_id
			ok[robot_id] = True
			num_ok += 1
	if num_ok == len(robots):
		break
print 'Got %d acknowledgements' % num_ok

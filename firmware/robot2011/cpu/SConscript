import os

Import('*')

chip = 'at91sam7s256'

# Definitions needed by at91lib
defs = '-D%s -DTRACE_LEVEL=0 -DNOASSERT' % chip

arm.Append(CFLAGS=defs + ' -g -Wall -std=gnu99')

arm.Append(CPPPATH=Dir('.').srcnode())

# Specify CPU explicitly since some GCC ARM builds may expect something more awesome by default.
#
# You can specify -marm to emit only full ARM (no Thumb) code.
# Thumb code is preferred because it is smaller and faster (due to flash prefetching).
#
# For some reason I can't get libgcc to build with interworking, so I changed the startup code (the only
# code that must be ARM) to call C code while in Thumb mode, so we don't need -mthumb-interwork.
arm.Append(CFLAGS='-Os -mcpu=arm7tdmi')	# note: used to include -mcpu=arm7tdmi 

# AT91 headers are used for both C and assembly, so a define is used to hide C-specific parts.
arm.Append(ASFLAGS=defs + ' -D__ASSEMBLY__ -Wall')

# Remove unreferenced code
arm.Append(CFLAGS='-ffunction-sections')
arm.Append(LINKFLAGS='-Wl,--gc-sections')

# disable support for exceptions
arm.Append(CFLAGS='-fno-exceptions -fno-unwind-tables')

# # don't optimize simple printf calls to puts
arm.Append(CFLAGS='-fno-builtin-printf')

# -static: Don't look for shared libraries and don't emit an interp section.
arm.Append(LINKFLAGS='-static')

# Make environments for linking for each type of memory
sram_lds = File('%s/sram.lds' % chip).srcnode()
arm_sram = arm.Clone()
arm_sram.Append(LINKFLAGS='-T' + sram_lds.path)

flash_lds = File('%s/flash.lds' % chip).srcnode()
arm_flash = arm.Clone()
arm_flash.Append(LINKFLAGS='-T' + flash_lds.path)


# --Wl,--build-id: Enable build ID to allow the code to be identified independent of git version
arm_flash.Append(LINKFLAGS='-Wl,--build-id')

# Build programming tools
reflasher = arm_sram.Program('tools/reflash.elf', ['tools/sram_start.S', 'tools/reflash.o'])
arm_sram.Binary('tools/reflash.bin', 'tools/reflash.elf')
Depends(reflasher, sram_lds)

samba_flash = Command(File('tools/samba-flash'), File('tools/samba-flash').srcnode().abspath, Copy('$TARGET', '$SOURCE'))
sam7 = Command(File('tools/sam7.py'), File('tools/sam7.py').srcnode().abspath, Copy('$TARGET', '$SOURCE'))
find_tty = Command(File('tools/find_tty.py'), File('tools/find_tty.py').srcnode().abspath, Copy('$TARGET', '$SOURCE'))
Depends(samba_flash, sam7)
Depends(samba_flash, find_tty)

# # Update git version text which will be compiled into the firmware for the status command
# arm.Tool('textfile')
# import pygit2
# repo = pygit2.Repository(Dir('#').abspath)
# git_version = str(repo.head.target)
# if len(repo.diff('HEAD')) > 0 :
# 	git_version += ' (modified)';
# version = arm.Textfile('version.c',
# 	['const char git_version[] = "@version@";', ''],
# 	SUBST_DICT=(('@version@', git_version),)
# )

# Files to build
robot_fw = arm_flash.Program('robocup.elf', [
	'usb/common/core/USBConfigurationDescriptor.c',
	'usb/device/cdc-serial/CDCDSerialDriverDescriptors.c',
	'usb/device/cdc-serial/CDCDSerialDriver.c',
	'usb/device/core/USBDDriver.c',
	'usb/device/core/USBD_UDP.c',
	'utility/stdio.c',
	'utility/string.c',
	'board_cstartup.S',
	'board_lowlevel.c',
	'board_memories.c',
	'main.c',
	'console.c',
	'commands.c',
	'timer.c',
	'status.c',
	'ball_sense.c',
	'adc.c',
	'fpga.c',
	'power.c',
	'control.c',
	'sound.c',
	'spi.c',
	'radio.c',
	'i2c.c',
	'imu.c',
	'stall.c',
	'ota_update.c',
	'encoder_monitor.c',
	'kicker.c',
	'radio_protocol.c',
	'tools/reflash.c',
	'invensense/imuSetup.c',
	'invensense/imuFIFO.c',
	'invensense/imuMldl.c',
	'invensense/imuMlsl.c',
	'invensense/mlcontrol.c',
	'invensense/dmpDefault.c',
	'invensense/imuCompatibility.c'
])
Depends(robot_fw, flash_lds)

# Generate a bare binary for programming
arm.Binary('robocup.bin', 'robocup.elf')
Alias('robot', 'robocup.bin')
Help('  robot: Build  robot ARM firmware\n')

# Target to program with SAM-BA (blank chip)
arm.Alias('robot-prog-samba', ['robocup.bin', samba_flash, 'tools/reflash.bin'], Action('./${SOURCES[1]} ${SOURCES[0]}'))
AlwaysBuild('robot-prog-samba')
Help('  robot-prog-samba: Build and program robot ARM firmware with SAM-BA\n')
Help('    (robot CPU must have SAM-BA loaded)\n')

# Target to program CPU with Robocup firmware already running
arm.Alias('robot-prog', 'robocup.bin', Action(File('tools/reflash').srcnode().path + ' $SOURCE'))
AlwaysBuild('robot-prog')
Help('  robot-prog: Build and program robot ARM firmware with USB console\n')
Help('    (robot CPU must have working firmware)\n')

arm.Alias('robot-ota', 'robocup.bin', Action(File('tools/ota-update').srcnode().path + ' $SOURCE'))
AlwaysBuild('robot-ota')
Help('  robot-ota: Program robots over the air\n')



# Depracated build targets
#
# Robot build targets used to all have the year 2011 in the target name
# In the interest of not making our code look outdated and also to be clear
# That this is the latest and greatest, I've removed the year.  For now, the old
# names are aliased to the new names so everything still works.
deprecationInfo = (
	('robot2011-prog', 'robot-prog'),
	('robot2011-prog-samba', 'robot-prog-samba'),
	('robot2011', 'robot'),
	('robot2011-ota', 'robot-ota'))
for oldName, newName in deprecationInfo:
	arm.Alias(oldName, newName)
	Help('This build target is depracated, please use %s instead' % newName)

#include <queue>
#include <string>

#include "CC1201Radio.hpp"

#include "logger.hpp"

/**
 * default constructor
 */
CC1201Config::CC1201Config() {}

/**
 * default destructor
 */
CC1201Config::~CC1201Config() {}

/**
 * configuration faults queue initialization
 */
queue<string> CC1201Config::configurationFaults;

/**
 * Resets the provided instance of CC1201Config to the defaults established by
 * the included header file. The header file is generated by RF studio and the
 * desired configuration should be included in CC1201Radio.hpp by following the
 * the directions there.
 *
 * @param CC1201Config* the instance of CC1201Config to be reset
 * @return CC1201Config* the instance of CC1201Config that has been reset
 */
CC1201Config* CC1201Config::resetConfiguration(CC1201Config* config)
{
	if (config == NULL)
		config = new CC1201Config();

	//standard registers
	config->iocfg3 				= SMARTRF_SETTING_IOCFG3;
	config->iocfg2 				= SMARTRF_SETTING_IOCFG2;
	config->iocfg1 				= SMARTRF_SETTING_IOCFG1;
	config->iocfg0 				= SMARTRF_SETTING_IOCFG0;
	config->sync3 				= SMARTRF_SETTING_SYNC3;
	config->sync2 				= SMARTRF_SETTING_SYNC2;
	config->sync1 				= SMARTRF_SETTING_SYNC1;
	config->sync0 				= SMARTRF_SETTING_SYNC0;
	config->syncCfg1 			= SMARTRF_SETTING_SYNC_CFG1;
	config->syncCfg0 			= SMARTRF_SETTING_SYNC_CFG0;
	config->deviationM 			= SMARTRF_SETTING_DEVIATION_M;
	config->modcfgDevE 			= SMARTRF_SETTING_MODCFG_DEV_E;
	config->dcfiltCfg 			= SMARTRF_SETTING_DCFILT_CFG;
	config->preambleCfg1 		= SMARTRF_SETTING_PREAMBLE_CFG1;
	config->preambleCfg0 		= SMARTRF_SETTING_PREAMBLE_CFG0;
	config->iqic 				= SMARTRF_SETTING_IQIC;
	config->chanBw 				= SMARTRF_SETTING_CHAN_BW;
	config->mdmcfg1 			= SMARTRF_SETTING_MDMCFG1;
	config->mdmcfg0 			= SMARTRF_SETTING_MDMCFG0;
	config->symbolRate2 		= SMARTRF_SETTING_SYMBOL_RATE2;
	config->symbolRate1 		= SMARTRF_SETTING_SYMBOL_RATE1;
	config->symbolRate0 		= SMARTRF_SETTING_SYMBOL_RATE0;
	config->agcRef 				= SMARTRF_SETTING_AGC_REF;
	config->agcCsThr 			= SMARTRF_SETTING_AGC_CS_THR;
	config->agcGainAdjust 		= SMARTRF_SETTING_AGC_GAIN_ADJUST;
	config->agcCfg3 			= SMARTRF_SETTING_AGC_CFG3;
	config->agcCfg2 			= SMARTRF_SETTING_AGC_CFG2;
	config->agcCfg1 			= SMARTRF_SETTING_AGC_CFG1;
	config->agcCfg0 			= SMARTRF_SETTING_AGC_CFG0;
	config->fifoCfg 			= SMARTRF_SETTING_FIFO_CFG;
	config->devAddr 			= SMARTRF_SETTING_DEV_ADDR;
	config->settlingCfg 		= SMARTRF_SETTING_SETTLING_CFG;
	config->fsCfg 				= SMARTRF_SETTING_FS_CFG;
	config->worCfg1 			= SMARTRF_SETTING_WOR_CFG1;
	config->worCfg0 			= SMARTRF_SETTING_WOR_CFG0;
	config->worEvent0Msb 		= SMARTRF_SETTING_WOR_EVENT0_MSB;
	config->worEvent0Lsb 		= SMARTRF_SETTING_WOR_EVENT0_LSB;
	config->rxdcmTime 			= SMARTRF_SETTING_RXDCM_TIME;
	config->pktCfg2 			= SMARTRF_SETTING_PKT_CFG2;
	config->pktCfg1 			= SMARTRF_SETTING_PKT_CFG1;
	config->pktCfg0 			= SMARTRF_SETTING_PKT_CFG0;
	config->rfendCfg1 			= SMARTRF_SETTING_RFEND_CFG1;
	config->rfendCfg0 			= SMARTRF_SETTING_RFEND_CFG0;
	config->paCfg1 				= SMARTRF_SETTING_PA_CFG1;
	config->paCfg0 				= SMARTRF_SETTING_PA_CFG0;
	config->askCfg 				= SMARTRF_SETTING_ASK_CFG;
	config->pktLen 				= SMARTRF_SETTING_PKT_LEN;
	//extended registers
	config->ifMixCfg 			= SMARTRF_SETTING_IF_MIX_CFG;
	config->freqoffCfg 			= SMARTRF_SETTING_FREQOFF_CFG;
	config->tocCfg 				= SMARTRF_SETTING_TOC_CFG;
	config->marcSpare 			= SMARTRF_SETTING_MARC_SPARE;
	config->ecgCfg 				= SMARTRF_SETTING_ECG_CFG;
	config->mdmcfg2 			= SMARTRF_SETTING_MDMCFG2;
	config->extCtrl 			= SMARTRF_SETTING_EXT_CTRL;
	config->rccalFine 			= SMARTRF_SETTING_RCCAL_FINE;
	config->rccalCoarse 		= SMARTRF_SETTING_RCCAL_COARSE;
	config->rccalOffset 		= SMARTRF_SETTING_RCCAL_OFFSET;
	config->freqoff1 			= SMARTRF_SETTING_FREQOFF1;
	config->freqoff0 			= SMARTRF_SETTING_FREQOFF0;
	config->freq2 				= SMARTRF_SETTING_FREQ2;
	config->freq1 				= SMARTRF_SETTING_FREQ1;
	config->freq0 				= SMARTRF_SETTING_FREQ0;
	config->ifAdc2 				= SMARTRF_SETTING_IF_ADC2;
	config->ifAdc1 				= SMARTRF_SETTING_IF_ADC1;
	config->ifAdc0 				= SMARTRF_SETTING_IF_ADC0;
	config->fsDig1 				= SMARTRF_SETTING_FS_DIG1;
	config->fsDig0 				= SMARTRF_SETTING_FS_DIG0;
	config->fsCal3 				= SMARTRF_SETTING_FS_CAL3;
	config->fsCal2 				= SMARTRF_SETTING_FS_CAL2;
	config->fsCal1 				= SMARTRF_SETTING_FS_CAL1;
	config->fsCal0 				= SMARTRF_SETTING_FS_CAL0;
	config->fsChp 				= SMARTRF_SETTING_FS_CHP;
	config->fsDivtwo 			= SMARTRF_SETTING_FS_DIVTWO;
	config->fsDsm1 				= SMARTRF_SETTING_FS_DSM1;
	config->fsDsm0 				= SMARTRF_SETTING_FS_DSM0;
	config->fsDvc1 				= SMARTRF_SETTING_FS_DVC1;
	config->fsDvc0 				= SMARTRF_SETTING_FS_DVC0;
	config->fsLbi 				= SMARTRF_SETTING_FS_LBI;
	config->fsPfd 				= SMARTRF_SETTING_FS_PFD;
	config->fsPre 				= SMARTRF_SETTING_FS_PRE;
	config->fsRegDivCml 		= SMARTRF_SETTING_FS_REG_DIV_CML;
	config->fsSpare 			= SMARTRF_SETTING_FS_SPARE;
	config->fsVco4 				= SMARTRF_SETTING_FS_VCO4;
	config->fsVco3 				= SMARTRF_SETTING_FS_VCO3;
	config->fsVco2 				= SMARTRF_SETTING_FS_VCO2;
	config->fsVco1 				= SMARTRF_SETTING_FS_VCO1;
	config->fsVco0 				= SMARTRF_SETTING_FS_VCO0;
	config->gbias6 				= SMARTRF_SETTING_GBIAS6;
	config->gbias5 				= SMARTRF_SETTING_GBIAS5;
	config->gbias4 				= SMARTRF_SETTING_GBIAS4;
	config->gbias3 				= SMARTRF_SETTING_GBIAS3;
	config->gbias2 				= SMARTRF_SETTING_GBIAS2;
	config->gbias1 				= SMARTRF_SETTING_GBIAS1;
	config->gbias0 				= SMARTRF_SETTING_GBIAS0;
	config->ifamp 				= SMARTRF_SETTING_IFAMP;
	config->lna 				= SMARTRF_SETTING_LNA;
	config->rxmix 				= SMARTRF_SETTING_RXMIX;
	config->xosc5 				= SMARTRF_SETTING_XOSC5;
	config->xosc4 				= SMARTRF_SETTING_XOSC4;
	config->xosc3 				= SMARTRF_SETTING_XOSC3;
	config->xosc2 				= SMARTRF_SETTING_XOSC2;
	config->xosc1				= SMARTRF_SETTING_XOSC1;
	config->xosc0 				= SMARTRF_SETTING_XOSC0;
	config->analogSpare 		= SMARTRF_SETTING_ANALOG_SPARE;
	config->paCfg3 				= SMARTRF_SETTING_PA_CFG3;
	config->worTime1 			= SMARTRF_SETTING_WOR_TIME1;
	config->worTime0			= SMARTRF_SETTING_WOR_TIME0;
	config->worCapture1 		= SMARTRF_SETTING_WOR_CAPTURE1;
	config->worCapture0 		= SMARTRF_SETTING_WOR_CAPTURE0;
	config->bist 				= SMARTRF_SETTING_BIST;
	config->dcfiltoffsetI1 		= SMARTRF_SETTING_DCFILTOFFSET_I1;
	config->dcfiltoffsetI0 		= SMARTRF_SETTING_DCFILTOFFSET_I0;
	config->dcfiltoffsetQ1 		= SMARTRF_SETTING_DCFILTOFFSET_Q1;
	config->dcfiltoffsetQ0 		= SMARTRF_SETTING_DCFILTOFFSET_Q0;
	config->iqieI1 				= SMARTRF_SETTING_IQIE_I1;
	config->iqieI0 				= SMARTRF_SETTING_IQIE_I0;
	config->iqieQ1 				= SMARTRF_SETTING_IQIE_Q1;
	config->iqieQ0 				= SMARTRF_SETTING_IQIE_Q0;
	config->rssi1 				= SMARTRF_SETTING_RSSI1;
	config->rssi0 				= SMARTRF_SETTING_RSSI0;
	config->marcstate 			= SMARTRF_SETTING_MARCSTATE;
	config->lqiVal 				= SMARTRF_SETTING_LQI_VAL;
	config->pqtSyncErr 			= SMARTRF_SETTING_PQT_SYNC_ERR;
	config->demStatus 			= SMARTRF_SETTING_DEM_STATUS;
	config->freqoffEst1 		= SMARTRF_SETTING_FREQOFF_EST1;
	config->freqoffEst0 		= SMARTRF_SETTING_FREQOFF_EST0;
	config->agcGain3 		 	= SMARTRF_SETTING_AGC_GAIN3;
	config->agcGain2 			= SMARTRF_SETTING_AGC_GAIN2;
	config->agcGain1 			= SMARTRF_SETTING_AGC_GAIN1;
	config->agcGain0 			= SMARTRF_SETTING_AGC_GAIN0;
	config->cfmRxDataOut		= SMARTRF_SETTING_CFM_RX_DATA_OUT;
	config->cfmTxDataIn 		= SMARTRF_SETTING_CFM_TX_DATA_IN;
	config->askSoftRxData 		= SMARTRF_SETTING_ASK_SOFT_RX_DATA;
	config->rndgen				= SMARTRF_SETTING_RNDGEN;
	config->magn2				= SMARTRF_SETTING_MAGN2;
	config->magn1				= SMARTRF_SETTING_MAGN1;
	config->magn0				= SMARTRF_SETTING_MAGN0;
	config->ang1 				= SMARTRF_SETTING_ANG1;
	config->ang0 				= SMARTRF_SETTING_ANG0;
	config->chfiltI2 			= SMARTRF_SETTING_CHFILT_I2;
	config->chfiltI1 			= SMARTRF_SETTING_CHFILT_I1;
	config->chfiltI0 			= SMARTRF_SETTING_CHFILT_I0;
	config->chfiltQ2 			= SMARTRF_SETTING_CHFILT_Q2;
	config->chfiltQ1 			= SMARTRF_SETTING_CHFILT_Q1;
	config->chfiltQ0 			= SMARTRF_SETTING_CHFILT_Q0;
	config->gpioStatus 			= SMARTRF_SETTING_GPIO_STATUS;
	config->fscalCtrl 			= SMARTRF_SETTING_FSCAL_CTRL;
	config->phaseAdjust 		= SMARTRF_SETTING_PHASE_ADJUST;
	config->partnumber 			= SMARTRF_SETTING_PARTNUMBER;
	config->partversion 		= SMARTRF_SETTING_PARTVERSION;
	config->serialStatus 		= SMARTRF_SETTING_SERIAL_STATUS;
	config->modemStatus1 		= SMARTRF_SETTING_MODEM_STATUS1;
	config->modemStatus0		= SMARTRF_SETTING_MODEM_STATUS0;
	config->marcStatus1 		= SMARTRF_SETTING_MARC_STATUS1;
	config->marcStatus0 		= SMARTRF_SETTING_MARC_STATUS0;
	config->paIfampTest 		= SMARTRF_SETTING_PA_IFAMP_TEST;
	config->fsrfTest 			= SMARTRF_SETTING_FSRF_TEST;
	config->preTest 			= SMARTRF_SETTING_PRE_TEST;
	config->preOvr				= SMARTRF_SETTING_PRE_OVR;
	config->adcTest 			= SMARTRF_SETTING_ADC_TEST;
	config->dvcTest 			= SMARTRF_SETTING_DVC_TEST;
	config->atest 				= SMARTRF_SETTING_ATEST;
	config->atestLvds			= SMARTRF_SETTING_ATEST_LVDS;
	config->atestMode 			= SMARTRF_SETTING_ATEST_MODE;
	config->xoscTest1 			= SMARTRF_SETTING_XOSC_TEST1;
	config->xoscTest0 			= SMARTRF_SETTING_XOSC_TEST0;
	config->aes					= SMARTRF_SETTING_AES;
	config->mdmTest 			= SMARTRF_SETTING_MDM_TEST;
	config->rxfirst 			= SMARTRF_SETTING_RXFIRST;
	config->txfirst 			= SMARTRF_SETTING_TXFIRST;
	config->rxlast 				= SMARTRF_SETTING_RXLAST;
	config->txlast 				= SMARTRF_SETTING_TXLAST;
	config->numTxbytes 			= SMARTRF_SETTING_NUM_TXBYTES;
	config->numRxbytes 			= SMARTRF_SETTING_NUM_RXBYTES;
	config->fifoNumTxbytes 		= SMARTRF_SETTING_FIFO_NUM_TXBYTES;
	config->fifoNumRxbytes		= SMARTRF_SETTING_FIFO_NUM_RXBYTES;
	config->rxfifoPreBuf 		= SMARTRF_SETTING_RXFIFO_PRE_BUF;
	config->aesKey15 			= SMARTRF_SETTING_AES_KEY15;
	config->aesKey14 			= SMARTRF_SETTING_AES_KEY14;
	config->aesKey13 			= SMARTRF_SETTING_AES_KEY13;
	config->aesKey12 			= SMARTRF_SETTING_AES_KEY12;
	config->aesKey11 			= SMARTRF_SETTING_AES_KEY11;
	config->aesKey10 			= SMARTRF_SETTING_AES_KEY10;
	config->aesKey9 			= SMARTRF_SETTING_AES_KEY9;
	config->aesKey8 			= SMARTRF_SETTING_AES_KEY8;
	config->aesKey7 			= SMARTRF_SETTING_AES_KEY7;
	config->aesKey6 			= SMARTRF_SETTING_AES_KEY6;
	config->aesKey5 			= SMARTRF_SETTING_AES_KEY5;
	config->aesKey4 			= SMARTRF_SETTING_AES_KEY4;
	config->aesKey3 			= SMARTRF_SETTING_AES_KEY3;
	config->aesKey2 			= SMARTRF_SETTING_AES_KEY2;
	config->aesKey1 			= SMARTRF_SETTING_AES_KEY1;
	config->aesKey0 			= SMARTRF_SETTING_AES_KEY0;
	config->aesBuffer15 		= SMARTRF_SETTING_AES_BUFFER15;
	config->aesBuffer14 		= SMARTRF_SETTING_AES_BUFFER14;
	config->aesBuffer13 		= SMARTRF_SETTING_AES_BUFFER13;
	config->aesBuffer12 		= SMARTRF_SETTING_AES_BUFFER12;
	config->aesBuffer11 		= SMARTRF_SETTING_AES_BUFFER11;
	config->aesBuffer10 		= SMARTRF_SETTING_AES_BUFFER10;
	config->aesBuffer9 			= SMARTRF_SETTING_AES_BUFFER9;
	config->aesBuffer8 			= SMARTRF_SETTING_AES_BUFFER8;
	config->aesBuffer7 			= SMARTRF_SETTING_AES_BUFFER7;
	config->aesBuffer6 			= SMARTRF_SETTING_AES_BUFFER6;
	config->aesBuffer5 			= SMARTRF_SETTING_AES_BUFFER5;
	config->aesBuffer4 			= SMARTRF_SETTING_AES_BUFFER4;
	config->aesBuffer3 			= SMARTRF_SETTING_AES_BUFFER3;
	config->aesBuffer2 			= SMARTRF_SETTING_AES_BUFFER2;
	config->aesBuffer1 			= SMARTRF_SETTING_AES_BUFFER1;
	config->aesBuffer0 			= SMARTRF_SETTING_AES_BUFFER0;

	return config;
}

/**
 * Loads the provided instance of CC1201Config into a CC1201Device using that
 * device's write functions.
 *
 * @param CC1201Config* the configuration to be loaded
 * @param CC1201* the device into which the configuration will be loaded
 * @return CC1201* the device in which the configuration was just loaded
 */
CC1201* CC1201Config::loadConfiguration(CC1201Config* config, CC1201* device)
{
	//write standard registers
	device->writeReg(CC1201_IOCFG3, config->iocfg3);
	device->writeReg(CC1201_IOCFG2, config->iocfg2);
	device->writeReg(CC1201_IOCFG1, config->iocfg1);
	device->writeReg(CC1201_IOCFG0, config->iocfg0);
	device->writeReg(CC1201_SYNC3, config->sync3);
	device->writeReg(CC1201_SYNC2, config->sync2);
	device->writeReg(CC1201_SYNC1, config->sync1);
	device->writeReg(CC1201_SYNC0, config->sync0);
	device->writeReg(CC1201_SYNC_CFG1, config->syncCfg1);
	device->writeReg(CC1201_SYNC_CFG0, config->syncCfg0);
	device->writeReg(CC1201_DEVIATION_M, config->deviationM);
	device->writeReg(CC1201_MODCFG_DEV_E, config->modcfgDevE);
	device->writeReg(CC1201_DCFILT_CFG, config->dcfiltCfg);
	device->writeReg(CC1201_PREAMBLE_CFG1, config->preambleCfg1);
	device->writeReg(CC1201_PREAMBLE_CFG0, config->preambleCfg0);
	device->writeReg(CC1201_IQIC, config->iqic);
	device->writeReg(CC1201_CHAN_BW, config->chanBw);
	device->writeReg(CC1201_MDMCFG1, config->mdmcfg1);
	device->writeReg(CC1201_MDMCFG0, config->mdmcfg0);
	device->writeReg(CC1201_SYMBOL_RATE2, config->symbolRate2);
	device->writeReg(CC1201_SYMBOL_RATE1, config->symbolRate1);
	device->writeReg(CC1201_SYMBOL_RATE0, config->symbolRate0);
	device->writeReg(CC1201_AGC_REF, config->agcRef);
	device->writeReg(CC1201_AGC_CS_THR, config->agcCsThr);
	device->writeReg(CC1201_AGC_GAIN_ADJUST, config->agcGainAdjust);
	device->writeReg(CC1201_AGC_CFG3, config->agcCfg3);
	device->writeReg(CC1201_AGC_CFG2, config->agcCfg2);
	device->writeReg(CC1201_AGC_CFG1, config->agcCfg1);
	device->writeReg(CC1201_AGC_CFG0, config->agcCfg0);
	device->writeReg(CC1201_FIFO_CFG, config->fifoCfg);
	device->writeReg(CC1201_DEV_ADDR, config->devAddr);
	device->writeReg(CC1201_SETTLING_CFG, config->settlingCfg);
	device->writeReg(CC1201_FS_CFG, config->fsCfg);
	device->writeReg(CC1201_WOR_CFG1, config->worCfg1);
	device->writeReg(CC1201_WOR_CFG0, config->worCfg0);
	device->writeReg(CC1201_WOR_EVENT0_MSB, config->worEvent0Msb);
	device->writeReg(CC1201_WOR_EVENT0_LSB, config->worEvent0Lsb);
	device->writeReg(CC1201_RXDCM_TIME, config->rxdcmTime);
	device->writeReg(CC1201_PKT_CFG2, config->pktCfg2);
	device->writeReg(CC1201_PKT_CFG1, config->pktCfg1);
	device->writeReg(CC1201_PKT_CFG0, config->pktCfg0);
	device->writeReg(CC1201_RFEND_CFG1, config->rfendCfg1);
	device->writeReg(CC1201_RFEND_CFG0, config->rfendCfg0);
	device->writeReg(CC1201_PA_CFG1, config->paCfg1);
	device->writeReg(CC1201_PA_CFG0, config->paCfg0);
	device->writeReg(CC1201_ASK_CFG, config->askCfg);
	device->writeReg(CC1201_PKT_LEN, config->pktLen);
	//write extended registers
	device->writeReg(CC1201EXT_IF_MIX_CFG, config->ifMixCfg, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQOFF_CFG, config->freqoffCfg, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_TOC_CFG, config->tocCfg, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MARC_SPARE, config->marcSpare, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ECG_CFG, config->ecgCfg, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MDMCFG2, config->mdmcfg2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_EXT_CTRL, config->extCtrl, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RCCAL_FINE, config->rccalFine, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RCCAL_COARSE, config->rccalCoarse, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RCCAL_OFFSET, config->rccalOffset, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQOFF1, config->freqoff1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQOFF0, config->freqoff0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQ2, config->freq2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQ1, config->freq1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQ0, config->freq0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IF_ADC2, config->ifAdc2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IF_ADC1, config->ifAdc1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IF_ADC0, config->ifAdc0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_DIG1, config->fsDig1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_DIG0, config->fsDig0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_CAL3, config->fsCal3, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_CAL2, config->fsCal2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_CAL1, config->fsCal1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_CAL0, config->fsCal0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_CHP, config->fsChp, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_DIVTWO, config->fsDivtwo, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_DSM1, config->fsDsm1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_DMS0, config->fsDsm0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_DVC1, config->fsDvc1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_DVC0, config->fsDvc0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_LBI, config->fsLbi, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_PFD, config->fsPfd, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_PRE, config->fsPre, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_REG_DIV_CML, config->fsRegDivCml, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_SPARE, config->fsSpare, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_VCO4, config->fsVco4, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_VCO3, config->fsVco3, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_VCO2, config->fsVco2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_VCO1, config->fsVco1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FS_VCO0, config->fsVco0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GBIAS6, config->gbias6, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GBIAS5, config->gbias5, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GBIAS4, config->gbias4, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GBIAS3, config->gbias3, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GBIAS2, config->gbias2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GBIAS1, config->gbias1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GBIAS0, config->gbias0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IFAMP, config->ifamp, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_LNA, config->lna, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RXMIX, config->rxmix, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC5, config->xosc5, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC4, config->xosc4, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC3, config->xosc3, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC2, config->xosc2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC1, config->xosc1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC0, config->xosc0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ANALOG_SPARE, config->analogSpare, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PA_CFG3, config->paCfg3, EXT_FLAG_ON);
	/*
	device->writeReg(CC1201EXT_WOR_TIME1, config->worTime1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_WOR_TIME0, config->worTime0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_WOR_CAPTURE1, config->worCapture1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_WOR_CAPTURE0, config->worCapture0);
	device->writeReg(CC1201EXT_BIST, config->bist, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_DCFILTOFFSET_I1, config->dcfiltoffsetI1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_DCFILTOFFSET_T0, config->dcfiltoffsetI0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_DCFILTOFFSET_Q1, config->dcfiltoffsetQ1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_DCFILTOFFSET_Q0, config->dcfiltoffsetQ0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IQIE_I1, config->iqieI1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IQIE_I0, config->iqieI0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IQIE_Q1, config->iqieQ1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_IQIE_Q0, config->iqieQ0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RSSI1, config->rssi1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RSSI0, config->rssi0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MARCSTATE, config->marcstate, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_LQI_VAL, config->lqiVal, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PQT_SYNC_ERR, config->pqtSyncErr, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_DEM_STATUS, config->demStatus, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQOFF_EST1, config->freqoffEst1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FREQOFF_EST0, config->freqoffEst0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_AGC_GAIN3, config->agcGain3, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_AGC_GAIN2, config->agcGain2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_AGC_GAIN1, config->agcGain1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_AGC_GAIN0, config->agcGain0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CFM_RX_DATA_OUT, config->cfmRxDataOut, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CFM_RX_DATA_IN, config->cfmTxDataIn, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ASK_SOFT_RX_DATA, config->askSoftRxData, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RNDGEN, config->rndgen, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MAGN2, config->magn2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MAGN1, config->magn1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MAGN0, config->magn0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ANG1, config->ang1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ANG0, config->ang0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CHFILT_I2, config->chfiltI2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CHFILT_I1, config->chfiltI1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CHFILT_I0, config->chfiltI0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CHFILT_Q2, config->chfiltQ2, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CHFILT_Q1, config->chfiltQ1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_CHFILT_Q0, config->chfiltQ0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_GPIO_STATUS, config->gpioStatus, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FSCAL_CTRL, config->fscalCtrl, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PHASE_ADJUST, config->phaseAdjust, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PARTNUMBER, config->partnumber, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PARTVERSION, config->partversion, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_SERIAL_STATUS, config->serialStatus, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MODEM_STATUS1, config->modemStatus1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MODEM_STATUS0, config->modemStatus0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MARC_STATUS1, config->marcStatus1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MARC_STATUS0, config->marcStatus0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PA_IFAMP_TEST, config->paIfampTest, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FSRF_TEST, config->fsrfTest, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PRE_TEST, config->preTest, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_PRE_OVR, config->preOvr, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ADC_TEST, config->adcTest, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_DVC_TEST, config->dvcTest, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ATEST, config->atest, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ATEST_LVDS, config->atestLvds, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_ATEST_MODE, config->atestMode, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC_TEST1, config->xoscTest1, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_XOSC_TEST0, config->xoscTest0, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_AES, config->aes, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_MDM_TEST, config->mdmTest, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RXFIRST, config->rxfirst, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_TXFIRST, config->txfirst, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RXLAST, config->rxlast, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_TXLAST, config->txlast, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_NUM_TXBYTES, config->numTxbytes, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_NUM_RXBYTES, config->numRxbytes, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FIFO_NUM_TXBYTES, config->fifoNumTxbytes, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_FIFO_NUM_RXBYTES, config->fifoNumRxbytes, EXT_FLAG_ON);
	device->writeReg(CC1201EXT_RXFIFO_PRE_BUF, config->rxfifoPreBuf, EXT_FLAG_ON);
	*/
	//TODO (if necessary) implement AES coverage (be same as above, just need to look at data sheet)

	return device;
}

/**
 * Verifies the configuration readback of the given CC1201 device against the
 * given CC1201Config specification.
 *
 * @param CC1201Config* the instance holding the preferred CC1201 configuration
 * @param CC1201* the device against which the preferred CC1201Config will be
 *                checked
 * @return if the verfication is error free (false means you should check the
 *         error queue)
 */
bool CC1201Config::verifyConfiguration(CC1201Config* config, CC1201* device)
{
	//clear faults queue
	std::queue<string> empty;
	std::swap(configurationFaults, empty);

	//expected value
	uint8_t expected = 0x00;

	//loop through standard register set
	for (uint8_t reg = 0x00; reg < 0x2F; reg++) {
		switch (reg) {
			case CC1201_IOCFG3:             expected = config->iocfg3;           break;

			case CC1201_IOCFG2:             expected = config->iocfg2;           break;

			case CC1201_IOCFG1:             expected = config->iocfg1;           break;

			case CC1201_IOCFG0:             expected = config->iocfg0;           break;

			case CC1201_SYNC3:              expected = config->sync3;            break;

			case CC1201_SYNC2:              expected = config->sync2;            break;

			case CC1201_SYNC1:              expected = config->sync1;            break;

			case CC1201_SYNC0:              expected = config->sync0;            break;

			case CC1201_SYNC_CFG1:          expected = config->syncCfg1;         break;

			case CC1201_SYNC_CFG0:          expected = config->syncCfg0;         break;

			case CC1201_DEVIATION_M:        expected = config->deviationM;       break;

			case CC1201_MODCFG_DEV_E:       expected = config->modcfgDevE;       break;

			case CC1201_DCFILT_CFG:         expected = config->dcfiltCfg;        break;

			case CC1201_PREAMBLE_CFG1:      expected = config->preambleCfg1;     break;

			case CC1201_PREAMBLE_CFG0:      expected = config->preambleCfg0;     break;

			case CC1201_IQIC:               expected = config->iqic;             break;

			case CC1201_CHAN_BW:            expected = config->chanBw;           break;

			case CC1201_MDMCFG1:            expected = config->mdmcfg1;          break;

			case CC1201_MDMCFG0:            expected = config->mdmcfg0;          break;

			case CC1201_SYMBOL_RATE2:       expected = config->symbolRate2;      break;

			case CC1201_SYMBOL_RATE1:       expected = config->symbolRate1;      break;

			case CC1201_SYMBOL_RATE0:       expected = config->symbolRate0;      break;

			case CC1201_AGC_REF:            expected = config->agcRef;           break;

			case CC1201_AGC_CS_THR:         expected = config->agcCsThr;         break;

			case CC1201_AGC_GAIN_ADJUST:    expected = config->agcGainAdjust;    break;

			case CC1201_AGC_CFG3:           expected = config->agcCfg3;          break;

			case CC1201_AGC_CFG2:           expected = config->agcCfg2;          break;

			case CC1201_AGC_CFG1:           expected = config->agcCfg1;          break;

			case CC1201_AGC_CFG0:           expected = config->agcCfg0;          break;

			case CC1201_FIFO_CFG:           expected = config->fifoCfg;          break;

			case CC1201_DEV_ADDR:           expected = config->devAddr;          break;

			case CC1201_SETTLING_CFG:       expected = config->settlingCfg;      break;

			case CC1201_FS_CFG:             expected = config->fsCfg;            break;

			case CC1201_WOR_CFG1:           expected = config->worCfg1;          break;

			case CC1201_WOR_CFG0:           expected = config->worCfg0;          break;

			case CC1201_WOR_EVENT0_MSB:     expected = config->worEvent0Msb;     break;

			case CC1201_WOR_EVENT0_LSB:     expected = config->worEvent0Lsb;     break;

			case CC1201_RXDCM_TIME:         expected = config->rxdcmTime;        break;

			case CC1201_PKT_CFG2:           expected = config->pktCfg2;          break;

			case CC1201_PKT_CFG1:           expected = config->pktCfg1;          break;

			case CC1201_PKT_CFG0:           expected = config->pktCfg0;          break;

			case CC1201_RFEND_CFG1:         expected = config->rfendCfg1;        break;

			case CC1201_RFEND_CFG0:         expected = config->rfendCfg0;        break;

			case CC1201_PA_CFG1:            expected = config->paCfg1;           break;

			case CC1201_PA_CFG0:            expected = config->paCfg0;           break;

			case CC1201_ASK_CFG:            expected = config->askCfg;           break;

			case CC1201_PKT_LEN:            expected = config->pktLen;           break;

			default: expected = 0x00;
		}

		//check for configuration mismatch
		if (device->readReg(reg) != expected) {
			//to_string doesn't seem to be supported by the mbed
			char regCStr[2];
			char valCStr[2];
			char expCStr[2];
			sprintf(regCStr, "%02X", reg);
			sprintf(valCStr, "%02X", device->readReg(reg));
			sprintf(expCStr, "%02X", expected);
			string regStr((const char*) regCStr, 2);
			string valStr((const char*) valCStr, 2);
			string expStr((const char*) expCStr, 2);
			string errorStr = ("Reg: " + regStr + ", Val: " + valStr + ", Exp: " + expStr);

			//push fault onto the queue for later processing
			//configurationFaults.push(errorStr);
		}
	}


	//loop through extended register set
	for (uint16_t extReg = 0x00; extReg <= 0xFF; extReg++) {
		//skip register sections that arent relevant or are dynamic
		//0x3A-0x63 reserved/unimplemented
		//0x91-0xFF reserved/unimplemented/test_flags/status_registers/AES
		if ((extReg >= 0x3A) | (extReg == 0x2F))// && extReg <= 0xFF))
			continue;
		else {
			switch (extReg) {
				case CC1201EXT_IF_MIX_CFG:          expected = config->ifMixCfg;         break;

				case CC1201EXT_FREQOFF_CFG:         expected = config->freqoffCfg;       break;

				case CC1201EXT_TOC_CFG:             expected = config->tocCfg;           break;

				case CC1201EXT_MARC_SPARE:          expected = config->marcSpare;        break;

				case CC1201EXT_ECG_CFG:             expected = config->ecgCfg;           break;

				case CC1201EXT_MDMCFG2:             expected = config->mdmcfg2;          break;

				case CC1201EXT_EXT_CTRL:            expected = config->extCtrl;          break;

				case CC1201EXT_RCCAL_FINE:          expected = config->rccalFine;        break;

				case CC1201EXT_RCCAL_COARSE:        expected = config->rccalCoarse;      break;

				case CC1201EXT_RCCAL_OFFSET:        expected = config->rccalOffset;      break;

				case CC1201EXT_FREQOFF1:            expected = config->freqoff1;         break;

				case CC1201EXT_FREQOFF0:            expected = config->freqoff0;         break;

				case CC1201EXT_FREQ2:               expected = config->freq2;            break;

				case CC1201EXT_FREQ1:               expected = config->freq1;            break;

				case CC1201EXT_FREQ0:               expected = config->freq0;            break;

				case CC1201EXT_IF_ADC2:             expected = config->ifAdc2;           break;

				case CC1201EXT_IF_ADC1:             expected = config->ifAdc1;           break;

				case CC1201EXT_IF_ADC0:             expected = config->ifAdc0;           break;

				case CC1201EXT_FS_DIG1:             expected = config->fsDig1;           break;

				case CC1201EXT_FS_DIG0:             expected = config->fsDig0;           break;

				case CC1201EXT_FS_CAL3:             expected = config->fsCal3;           break;

				case CC1201EXT_FS_CAL2:             expected = config->fsCal2;           break;

				case CC1201EXT_FS_CAL1:             expected = config->fsCal1;           break;

				case CC1201EXT_FS_CAL0:             expected = config->fsCal0;           break;

				case CC1201EXT_FS_CHP:              expected = config->fsChp;            break;

				case CC1201EXT_FS_DIVTWO:           expected = config->fsDivtwo;         break;

				case CC1201EXT_FS_DSM1:             expected = config->fsDsm1;           break;

				case CC1201EXT_FS_DMS0:             expected = config->fsDsm0;           break;

				case CC1201EXT_FS_DVC1:             expected = config->fsDvc1;           break;

				case CC1201EXT_FS_DVC0:             expected = config->fsDvc0;           break;

				case CC1201EXT_FS_LBI:              expected = config->fsLbi;            break;

				case CC1201EXT_FS_PFD:              expected = config->fsPfd;            break;

				case CC1201EXT_FS_PRE:              expected = config->fsPre;            break;

				case CC1201EXT_FS_REG_DIV_CML:      expected = config->fsRegDivCml;      break;

				case CC1201EXT_FS_SPARE:            expected = config->fsSpare;          break;

				case CC1201EXT_FS_VCO4:             expected = config->fsVco4;           break;

				case CC1201EXT_FS_VCO3:             expected = config->fsVco3;           break;

				case CC1201EXT_FS_VCO2:             expected = config->fsVco2;           break;

				case CC1201EXT_FS_VCO1:             expected = config->fsVco1;           break;

				case CC1201EXT_FS_VCO0:             expected = config->fsVco0;           break;

				case CC1201EXT_GBIAS6:              expected = config->gbias6;           break;

				case CC1201EXT_GBIAS5:              expected = config->gbias5;           break;

				case CC1201EXT_GBIAS4:              expected = config->gbias4;           break;

				case CC1201EXT_GBIAS3:              expected = config->gbias3;           break;

				case CC1201EXT_GBIAS2:              expected = config->gbias2;           break;

				case CC1201EXT_GBIAS1:              expected = config->gbias1;           break;

				case CC1201EXT_GBIAS0:              expected = config->gbias0;           break;

				case CC1201EXT_IFAMP:               expected = config->ifamp;            break;

				case CC1201EXT_LNA:                 expected = config->lna;              break;

				case CC1201EXT_RXMIX:               expected = config->rxmix;            break;

				case CC1201EXT_XOSC5:               expected = config->xosc5;            break;

				case CC1201EXT_XOSC4:               expected = config->xosc4;            break;

				case CC1201EXT_XOSC3:               expected = config->xosc3;            break;

				case CC1201EXT_XOSC2:               expected = config->xosc2;            break;

				case CC1201EXT_XOSC1:               expected = config->xosc1;            break;

				case CC1201EXT_XOSC0:               expected = config->xosc0;            break;

				case CC1201EXT_ANALOG_SPARE:        expected = config->analogSpare;      break;

				case CC1201EXT_PA_CFG3:             expected = config->paCfg3;           break;

				case CC1201EXT_WOR_TIME1:           expected = config->worTime1;         break;

				case CC1201EXT_WOR_TIME0:           expected = config->worTime0;         break;

				case CC1201EXT_WOR_CAPTURE1:        expected = config->worCapture1;      break;

				case CC1201EXT_WOR_CAPTURE0:        expected = config->worCapture0;      break;

				case CC1201EXT_BIST:                expected = config->bist;             break;

				case CC1201EXT_DCFILTOFFSET_I1:     expected = config->dcfiltoffsetI1;   break;

				case CC1201EXT_DCFILTOFFSET_T0:     expected = config->dcfiltoffsetI0;   break;

				case CC1201EXT_DCFILTOFFSET_Q1:     expected = config->dcfiltoffsetQ1;   break;

				case CC1201EXT_DCFILTOFFSET_Q0:     expected = config->dcfiltoffsetQ0;   break;

				case CC1201EXT_IQIE_I1:             expected = config->iqieI1;           break;

				case CC1201EXT_IQIE_I0:             expected = config->iqieI0;           break;

				case CC1201EXT_IQIE_Q1:             expected = config->iqieQ1;           break;

				case CC1201EXT_IQIE_Q0:             expected = config->iqieQ0;           break;

				case CC1201EXT_RSSI1:               expected = config->rssi1;            break;

				case CC1201EXT_RSSI0:               expected = config->rssi0;            break;

				case CC1201EXT_MARCSTATE:           expected = config->marcstate;        break;

				case CC1201EXT_LQI_VAL:             expected = config->lqiVal;           break;

				case CC1201EXT_PQT_SYNC_ERR:        expected = config->pqtSyncErr;       break;

				case CC1201EXT_DEM_STATUS:          expected = config->demStatus;        break;

				case CC1201EXT_FREQOFF_EST1:        expected = config->freqoffEst1;      break;

				case CC1201EXT_FREQOFF_EST0:        expected = config->freqoffEst0;      break;

				case CC1201EXT_AGC_GAIN3:           expected = config->agcGain3;         break;

				case CC1201EXT_AGC_GAIN2:           expected = config->agcGain2;         break;

				case CC1201EXT_AGC_GAIN1:           expected = config->agcGain1;         break;

				case CC1201EXT_AGC_GAIN0:           expected = config->agcGain0;         break;

				case CC1201EXT_CFM_RX_DATA_OUT:     expected = config->cfmRxDataOut;     break;

				case CC1201EXT_CFM_RX_DATA_IN:      expected = config->cfmTxDataIn;      break;

				case CC1201EXT_ASK_SOFT_RX_DATA:    expected = config->askSoftRxData;    break;

				case CC1201EXT_RNDGEN:              expected = config->rndgen;           break;

				case CC1201EXT_MAGN2:               expected = config->magn2;            break;

				case CC1201EXT_MAGN1:               expected = config->magn1;            break;

				case CC1201EXT_MAGN0:               expected = config->magn0;            break;

				case CC1201EXT_ANG1:                expected = config->ang1;             break;

				case CC1201EXT_ANG0:                expected = config->ang0;             break;

				case CC1201EXT_CHFILT_I2:           expected = config->chfiltI2;         break;

				case CC1201EXT_CHFILT_I1:           expected = config->chfiltI1;         break;

				case CC1201EXT_CHFILT_I0:           expected = config->chfiltI0;         break;

				case CC1201EXT_CHFILT_Q2:           expected = config->chfiltQ2;         break;

				case CC1201EXT_CHFILT_Q1:           expected = config->chfiltQ1;         break;

				case CC1201EXT_CHFILT_Q0:           expected = config->chfiltQ0;         break;

				case CC1201EXT_GPIO_STATUS:         expected = config->gpioStatus;       break;

				case CC1201EXT_FSCAL_CTRL:          expected = config->fscalCtrl;        break;

				case CC1201EXT_PHASE_ADJUST:        expected = config->phaseAdjust;      break;

				case CC1201EXT_PARTNUMBER:          expected = config->partnumber;       break;

				case CC1201EXT_PARTVERSION:         expected = config->partversion;      break;

				case CC1201EXT_SERIAL_STATUS:       expected = config->serialStatus;     break;

				case CC1201EXT_MODEM_STATUS1:       expected = config->modemStatus1;     break;

				case CC1201EXT_MODEM_STATUS0:       expected = config->modemStatus0;     break;

				case CC1201EXT_MARC_STATUS1:        expected = config->marcStatus1;      break;

				case CC1201EXT_MARC_STATUS0:        expected = config->marcStatus0;      break;

				case CC1201EXT_PA_IFAMP_TEST:       expected = config->paIfampTest;      break;

				case CC1201EXT_FSRF_TEST:           expected = config->fsrfTest;         break;

				case CC1201EXT_PRE_TEST:            expected = config->preTest;          break;

				case CC1201EXT_PRE_OVR:             expected = config->preOvr;           break;

				case CC1201EXT_ADC_TEST:            expected = config->adcTest;          break;

				case CC1201EXT_DVC_TEST:            expected = config->dvcTest;          break;

				case CC1201EXT_ATEST:               expected = config->atest;            break;

				case CC1201EXT_ATEST_LVDS:          expected = config->atestLvds;        break;

				case CC1201EXT_ATEST_MODE:          expected = config->atestMode;        break;

				case CC1201EXT_XOSC_TEST1:          expected = config->xoscTest1;        break;

				case CC1201EXT_XOSC_TEST0:          expected = config->xoscTest0;        break;

				case CC1201EXT_AES:                 expected = config->aes;              break;

				case CC1201EXT_MDM_TEST:            expected = config->mdmTest;          break;

				default:                            expected = 0x00;
			}

			//check for a configuration mismatch
			if (device->readReg(extReg, EXT_FLAG_ON) != expected) {
				//to_string doesn't seem to be supported by the mbed
				char regCStr[2];
				char valCStr[2];
				char expCStr[2];
				sprintf(regCStr, "%02X", extReg);
				sprintf(valCStr, "%02X", device->readReg(extReg, EXT_FLAG_ON));
				sprintf(expCStr, "%02X", expected);
				string regStr((const char*) regCStr, 2);
				string valStr((const char*) valCStr, 2);
				string expStr((const char*) expCStr, 2);
				string errorStr = ("ExtReg: " + regStr + ", Val: " + valStr + ", Exp: " + expStr);
				// LOG(OK, "%s", errorStr.c_str());
				//push the error onto the queue for processing later
				//configurationFaults.push(errorStr);
			}
		}
	}

	return configurationFaults.empty();
}

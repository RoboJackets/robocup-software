defaults_env: &setup_env
  run:
    name: Set $PATH
    command: |
      echo 'export GOPATH="$HOME/go"' >> $BASH_ENV
      echo 'export PATH="$PATH:$HOME/go/bin"' >> $BASH_ENV
      source $BASH_ENV

robocup_software_dir: &robocup_software_dir
  working_directory: ~/robocup_ws/src/robocup-software

robocup_ws_dir: &robocup_ws_dir
  working_directory: ~/robocup_ws/src/robocup-software

foxy_image: &foxy_image
  docker:
    - image: robojackets/robocup-software:foxy

defaults_deps: &install_deps
  run: ./util/ubuntu-setup --yes

save_workspace: &save_workspace
  persist_to_workspace:
    root: ~/robocup_ws
    paths:
      - install
      - build

load_workspace: &load_workspace
  attach_workspace:
    at: ~/robocup_ws

version: 2
jobs:
  # Compile everything and save the build folder
  compile:
    <<: *robocup_ws_dir
    <<: *foxy_image
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
    steps:
      - checkout
      - <<: *install_deps
      - run: |
          source /opt/ros/foxy/setup.sh && \
          colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=ON -GNinja
      - <<: *save_workspace

  # Use the saved build folder for testing
  test-all:
    <<: *robocup_ws_dir
    <<: *foxy_image
    steps:
      - checkout
      # Ensure latest deps are installed
      - <<: *install_deps
      - <<: *load_workspace
      # Run test without building anything
      - run: |
          source /opt/ros/foxy/setup.sh && \
          source install/setup.sh && \
          ./install/rj_robocup/lib/rj_robocup/test-soccer
      - run: cd src/robocup-software && make test-python-nobuild

  python-static:
    <<: *robocup_software_dir
    <<: *foxy_image
    steps:
      - checkout
      - <<: *install_deps
      - run: make pylint
      - run: pip3 install -r util/requirements3.txt
      - run: make mypy

  style:
    <<: *robocup_software_dir
    <<: *foxy_image
    steps:
      - checkout
      # We need environment variables ($GOPATH and $PATH specifically)
      - <<: *setup_env
      # Ensure latest deps are installed
      - <<: *install_deps
      - run: pip3 install --upgrade -r util/requirements3.txt
      - run: git fetch origin && DIFFBRANCH=origin/staging make checkstyle-lines
      - store_artifacts:
          path: /tmp/clean.patch

  clang-tidy:
    <<: *robocup_software_dir
    <<: *foxy_image
    steps:
      - checkout
      - <<: *setup_env
      - <<: *install_deps
      - <<: *load_workspace
      - run: |
          DIFFBRANCH=origin/staging make checktidy-lines
          cat /tmp/checktidy.patch
          if grep -q 'No relevant changes found' /tmp/checktidy.patch; then
            echo "No relevant changes found"
            exit 0
          fi

          mkdir -p /tmp/test-results/clang-tidy
          cat /tmp/checktidy.patch | python3 util/clang-tidy-to-junit.py > /tmp/test-results/clang-tidy/results.xml
          if [[ -n $(grep '[^[:space:]]' /tmp/checktidy.patch) ]]; then
            echo "****************************** clang-tidy errors *******************************"
            exit 1
          fi
      - store_test_results:
          path: /tmp/test-results

  gen-docs:
    <<: *robocup_software_dir
    <<: *foxy_image
    steps:
      - checkout
      # Ensure latest deps are installed
      - <<: *install_deps
      - run: ./autoupdate-docs.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - compile
      - test-all:
          requires:
            - compile
      - python-static
      - style
      - clang-tidy:
          requires:
            - compile

      - gen-docs:
          requires:
            - test-all
            - python-static
            - style

          filters:
            branches:
              only: master

Import('*')

e = env.Clone()

physx_path=Dir('#/SoccSim/lib/physx')
physx_include=physx_path.Dir('include')
physx_libpath = physx_path.Dir('lib')

e.Append(CPPPATH=[
	physx_include.Dir('Physics/include'),
	physx_include.Dir('Foundation/include'),
	physx_include.Dir('PhysXLoader/include'),
	physx_include.Dir('Cooking/include')])

# Link with PhysX libraries
e.Append(LIBPATH=physx_libpath)
e.Append(LIBS=['NxCooking', 'PhysXCore', 'PhysXLoader'])

# Flags required for PhysX on Linux
e.MergeFlags('-DNX32 -DLINUX -DNX_DISABLE_FLUIDS')

# Find uic output
e.Append(CPPPATH='.')

p = e.Program('soccsim', [
	'main.cpp',
	'SimControl.cpp',
	'Viewer.cpp',
	'Config.cpp',
	'Physics/Env.cpp',
	'Physics/Entity.cpp',
	'Physics/Ball.cpp',
	'Physics/Field.cpp',
	'Physics/Robot.cpp',
	'Physics/MemoryStream.cpp'])

uics = e.Uic4([
	'SimControl.ui'
])
e.Depends(p, uics)

Default(e.Install(exec_dir, p))
Help('SoccSim: Older PhysX-based 32-bit Simulator\n')

# Copy PhysX libraries to the run directory
Default(e.Install(exec_dir, physx_libpath.File('libNxCooking.so.1')))
Default(e.Install(exec_dir, physx_libpath.File('libPhysXLoader.so.1')))
Default(e.Install(exec_dir, physx_libpath.File('libPhysXCore.so.1')))
